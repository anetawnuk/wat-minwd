// Let's say we would like to find the minimum 
// of the function "f(x) = 10 * (x+1)^2 + y^2".

// In code, this means we would like to minimize:
Func<double[], double> function = (double[] x) =>
    10.0 * Math.Pow(x[0] + 1.0, 2.0) + Math.Pow(x[1], 2.0);

// We can do so using the NelderMead class:
var solver = new NelderMead(numberOfVariables: 2)
{
    Function = function // f(x) = 10 * (x+1)^2 + y^2
};

// Now, we can minimize it with:
bool success = solver.Minimize();

// And get the solution vector using
double[] solution = solver.Solution; // should be (-1, 1)

// The minimum at this location would be:
double minimum = solver.Value; // should be 0

// Which can be double-checked against Wolfram Alpha if there is need:
// https://www.wolframalpha.com/input/?i=min+10+*+(x%2B1)%5E2+%2B+y%5E2